// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: customer.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetCustomerByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCustomerByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCustomerByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCustomerByIdRequestMultiError, or nil if none found.
func (m *GetCustomerByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCustomerByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetCustomerByIdRequestMultiError(errors)
	}

	return nil
}

// GetCustomerByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetCustomerByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCustomerByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCustomerByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCustomerByIdRequestMultiError) AllErrors() []error { return m }

// GetCustomerByIdRequestValidationError is the validation error returned by
// GetCustomerByIdRequest.Validate if the designated constraints aren't met.
type GetCustomerByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomerByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomerByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomerByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomerByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomerByIdRequestValidationError) ErrorName() string {
	return "GetCustomerByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomerByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomerByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomerByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomerByIdRequestValidationError{}

// Validate checks the field values on NewCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NewCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NewCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NewCustomerRequestMultiError, or nil if none found.
func (m *NewCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *NewCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for Importance

	// no validation rules for Inactive

	if m.MiddleName != nil {
		// no validation rules for MiddleName
	}

	if len(errors) > 0 {
		return NewCustomerRequestMultiError(errors)
	}

	return nil
}

// NewCustomerRequestMultiError is an error wrapping multiple validation errors
// returned by NewCustomerRequest.ValidateAll() if the designated constraints
// aren't met.
type NewCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NewCustomerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NewCustomerRequestMultiError) AllErrors() []error { return m }

// NewCustomerRequestValidationError is the validation error returned by
// NewCustomerRequest.Validate if the designated constraints aren't met.
type NewCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewCustomerRequestValidationError) ErrorName() string {
	return "NewCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e NewCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewCustomerRequestValidationError{}

// Validate checks the field values on UpdateCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCustomerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCustomerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCustomerRequestMultiError, or nil if none found.
func (m *UpdateCustomerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCustomerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for Importance

	// no validation rules for Inactive

	if m.MiddleName != nil {
		// no validation rules for MiddleName
	}

	if len(errors) > 0 {
		return UpdateCustomerRequestMultiError(errors)
	}

	return nil
}

// UpdateCustomerRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCustomerRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCustomerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCustomerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCustomerRequestMultiError) AllErrors() []error { return m }

// UpdateCustomerRequestValidationError is the validation error returned by
// UpdateCustomerRequest.Validate if the designated constraints aren't met.
type UpdateCustomerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomerRequestValidationError) ErrorName() string {
	return "UpdateCustomerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomerRequestValidationError{}

// Validate checks the field values on CustomerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CustomerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomerResponseMultiError, or nil if none found.
func (m *CustomerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for Email

	// no validation rules for Importance

	// no validation rules for Inactive

	if m.MiddleName != nil {
		// no validation rules for MiddleName
	}

	if len(errors) > 0 {
		return CustomerResponseMultiError(errors)
	}

	return nil
}

// CustomerResponseMultiError is an error wrapping multiple validation errors
// returned by CustomerResponse.ValidateAll() if the designated constraints
// aren't met.
type CustomerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomerResponseMultiError) AllErrors() []error { return m }

// CustomerResponseValidationError is the validation error returned by
// CustomerResponse.Validate if the designated constraints aren't met.
type CustomerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerResponseValidationError) ErrorName() string { return "CustomerResponseValidationError" }

// Error satisfies the builtin error interface
func (e CustomerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerResponseValidationError{}

// Validate checks the field values on CustomerListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CustomerListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CustomerListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CustomerListResponseMultiError, or nil if none found.
func (m *CustomerListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CustomerListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCustomers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CustomerListResponseValidationError{
						field:  fmt.Sprintf("Customers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CustomerListResponseValidationError{
						field:  fmt.Sprintf("Customers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CustomerListResponseValidationError{
					field:  fmt.Sprintf("Customers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CustomerListResponseMultiError(errors)
	}

	return nil
}

// CustomerListResponseMultiError is an error wrapping multiple validation
// errors returned by CustomerListResponse.ValidateAll() if the designated
// constraints aren't met.
type CustomerListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CustomerListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CustomerListResponseMultiError) AllErrors() []error { return m }

// CustomerListResponseValidationError is the validation error returned by
// CustomerListResponse.Validate if the designated constraints aren't met.
type CustomerListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CustomerListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CustomerListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CustomerListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CustomerListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CustomerListResponseValidationError) ErrorName() string {
	return "CustomerListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CustomerListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCustomerListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CustomerListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CustomerListResponseValidationError{}

// Validate checks the field values on DeleteCustomerByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCustomerByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCustomerByIdRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCustomerByIdRequestMultiError, or nil if none found.
func (m *DeleteCustomerByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCustomerByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCustomerByIdRequestMultiError(errors)
	}

	return nil
}

// DeleteCustomerByIdRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCustomerByIdRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteCustomerByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCustomerByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCustomerByIdRequestMultiError) AllErrors() []error { return m }

// DeleteCustomerByIdRequestValidationError is the validation error returned by
// DeleteCustomerByIdRequest.Validate if the designated constraints aren't met.
type DeleteCustomerByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCustomerByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCustomerByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCustomerByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCustomerByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCustomerByIdRequestValidationError) ErrorName() string {
	return "DeleteCustomerByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCustomerByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCustomerByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCustomerByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCustomerByIdRequestValidationError{}
