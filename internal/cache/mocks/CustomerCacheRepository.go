// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	model "github.com/umalmyha/customers/internal/model"
)

// CustomerCacheRepository is an autogenerated mock type for the CustomerCacheRepository type
type CustomerCacheRepository struct {
	mock.Mock
}

type CustomerCacheRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomerCacheRepository) EXPECT() *CustomerCacheRepository_Expecter {
	return &CustomerCacheRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *CustomerCacheRepository) Create(_a0 context.Context, _a1 *model.Customer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Customer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerCacheRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CustomerCacheRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *model.Customer
func (_e *CustomerCacheRepository_Expecter) Create(_a0 interface{}, _a1 interface{}) *CustomerCacheRepository_Create_Call {
	return &CustomerCacheRepository_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *CustomerCacheRepository_Create_Call) Run(run func(_a0 context.Context, _a1 *model.Customer)) *CustomerCacheRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Customer))
	})
	return _c
}

func (_c *CustomerCacheRepository_Create_Call) Return(_a0 error) *CustomerCacheRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteByID provides a mock function with given fields: _a0, _a1
func (_m *CustomerCacheRepository) DeleteByID(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerCacheRepository_DeleteByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByID'
type CustomerCacheRepository_DeleteByID_Call struct {
	*mock.Call
}

// DeleteByID is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 string
func (_e *CustomerCacheRepository_Expecter) DeleteByID(_a0 interface{}, _a1 interface{}) *CustomerCacheRepository_DeleteByID_Call {
	return &CustomerCacheRepository_DeleteByID_Call{Call: _e.mock.On("DeleteByID", _a0, _a1)}
}

func (_c *CustomerCacheRepository_DeleteByID_Call) Run(run func(_a0 context.Context, _a1 string)) *CustomerCacheRepository_DeleteByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CustomerCacheRepository_DeleteByID_Call) Return(_a0 error) *CustomerCacheRepository_DeleteByID_Call {
	_c.Call.Return(_a0)
	return _c
}

// FindByID provides a mock function with given fields: _a0, _a1
func (_m *CustomerCacheRepository) FindByID(_a0 context.Context, _a1 string) (*model.Customer, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *model.Customer
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Customer); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerCacheRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type CustomerCacheRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 string
func (_e *CustomerCacheRepository_Expecter) FindByID(_a0 interface{}, _a1 interface{}) *CustomerCacheRepository_FindByID_Call {
	return &CustomerCacheRepository_FindByID_Call{Call: _e.mock.On("FindByID", _a0, _a1)}
}

func (_c *CustomerCacheRepository_FindByID_Call) Run(run func(_a0 context.Context, _a1 string)) *CustomerCacheRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CustomerCacheRepository_FindByID_Call) Return(_a0 *model.Customer, _a1 error) *CustomerCacheRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewCustomerCacheRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerCacheRepository creates a new instance of CustomerCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerCacheRepository(t mockConstructorTestingTNewCustomerCacheRepository) *CustomerCacheRepository {
	mock := &CustomerCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
